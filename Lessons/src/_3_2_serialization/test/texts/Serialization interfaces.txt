There two interfaces in Java language, which supports serialization process:

    - Serializable;
    - Externalizable.
    
    "By implementating java.io.Serializable, you get "automatic" serialization 
capability for objects of your class. No need to implement any other logic, 
it'll just work. The Java runtime will use reflection to figure out how to 
marshal and unmarshal your objects.

    In earlier version of Java, reflection was very slow, and so serializaing 
large object graphs (e.g. in client-server RMI applications) was a bit of a 
performance problem. To handle this situation, the java.io.Externalizable 
interface was provided, which is like java.io.Serializable but with 
custom-written mechanisms to perform the marshalling and unmarshalling functions
 (you need to implement readExternal and writeExternal methods on your class). 
 This gives you the means to get around the reflection performance bottleneck".*
 
    For some more specified reasons, Java also has two secondary interfaces, 
which are implemented by such classes like ObjectOutputStream and 
ObjectInputStream:

    - ObjectInput;
    - ObjectOutput;
    - ObjectStreamConstants.
    
    According to its Javadoc, ObjectInput interface extends the DataInput 
interface to include the reading of objects. DataInput includes methods for 
the input of primitive types, ObjectInput extends that interface to include 
objects, arrays, and Strings.

    ObjectOutput extends the DataOutput interface to include writing of objects.
 DataOutput includes methods for output of primitive types, ObjectOutput
 extends that interface to include objects, arrays, and Strings

    ObjectStreamConstants Constants written allows constants be written into the
Object Serialization Stream.
 _______________________________________
 * Resource: 
   http://stackoverflow.com/questions/817853/what-is-the-difference-between-serializable-and-externalizable-in-java
   (post info: Jul 18 '11 at 16:11 Craig P. Motlin)